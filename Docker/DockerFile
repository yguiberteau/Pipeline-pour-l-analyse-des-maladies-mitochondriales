# Utilisation d'une image de base
FROM ubuntu:latest

######################################
##### INSTALLATION DES LOGICIELS #####
######################################

#Installation des dépendances
RUN apt-get update && apt-get install --no-install-recommends -y \
    libncurses5-dev \
    libbz2-dev \
    liblzma-dev \
    libcurl4-gnutls-dev \
    zlib1g-dev \
    libssl-dev \
    gcc \
    wget \
    make \
    perl \
    bzip2 \
    gnuplot \
    ca-certificates \
    gawk && \
    apt-get autoclean && rm -rf /var/lib/apt/lists/*


###### INSTALLATION DE PYTHON2 ######
# Mise à jour de la liste des paquets
# RUN apt-get update

# # Installation de Python 2
# RUN apt-get install -y python2

# # Configuration de Python 2 comme la version par défaut
# RUN ln -s /usr/bin/python2 /usr/bin/python

###### INSTALLATION DE JAVA #######

RUN apt-get update && apt-get install -y wget gnupg2

# Ajout du référentiel OpenJDK
RUN echo "deb http://ppa.launchpad.net/openjdk-r/ppa/ubuntu bionic main" >> /etc/apt/sources.list.d/openjdk.list && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 86F44E2A

# Mise à jour des paquets et installation de Java 64 bits
RUN apt-get update && apt-get install -y openjdk-8-jdk

# variables d'environnements 
ENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
ENV PATH="$JAVA_HOME/bin:${PATH}"

# Vérification de l'installation de Java
RUN java -version

# Commande par défaut lorsque le conteneur est exécuté
CMD ["java", "-version"]

###### INSTALLATIONS DE SAMTOOLS ######

ARG SAMTOOLSVER=1.13

RUN wget https://github.com/samtools/samtools/releases/download/${SAMTOOLSVER}/samtools-${SAMTOOLSVER}.tar.bz2 && \
    tar -xjf samtools-${SAMTOOLSVER}.tar.bz2 && \
    rm samtools-${SAMTOOLSVER}.tar.bz2 && \
    cd samtools-${SAMTOOLSVER} && \
    ./configure && \
    make && \
    make install && \
    cd .. && \
    rm -rf samtools-${SAMTOOLSVER} && \
    mkdir /data

RUN apt-get update && apt-get install -y git

###### INSTALLATION DE BWA #######

RUN apt-get update

RUN apt-get install -y bwa

###### INSTALLATION DE PICARD TOOLS ######
# Picard Tools
RUN wget https://github.com/broadinstitute/picard/releases/download/2.25.6/picard.jar

RUN mv picard.jar /usr/local/bin/picard.jar
ENV PICARD_HOME /usr/local/bin

# Add a script to run Picard Tools
RUN echo '#!/bin/bash' >> /usr/local/bin/picard
RUN echo 'java -jar /usr/local/bin/picard.jar "$@"' >> /usr/local/bin/picard
RUN chmod +x /usr/local/bin/picard

# Set PICARD_HOME and add /usr/local/bin to PATH
ENV PATH $PATH:/usr/local/bin


###### INSTALLATION DE GATK ######
# Installation des dépendances
RUN apt-get update && apt-get install -y \
    openjdk-8-jdk \
    curl \
    unzip

# Téléchargement et installation de GATK
RUN curl -L -o gatk.zip "https://github.com/broadinstitute/gatk/releases/download/4.2.0.0/gatk-4.2.0.0.zip" && \
    unzip gatk.zip -d /gatk && \
    rm gatk.zip

# Définition de la variable d'environnement PATH
ENV PATH="/gatk/gatk-4.2.0.0:${PATH}"


############################################################
####### CREATION DES RÉPERTOIRE ET CLONAGE DU GITHUB #######
############################################################

WORKDIR /
# Creation du répertoire dans lequel sera présent les scripts du github
RUN mkdir /github

# Creation du répertoire output qui se sera transfere sur le repertoire de l'orinateur de l'utilisateur 
RUN mkdir /output 

WORKDIR /github


# Clone du referentiel GitHub, copie de son contenu dans le repertoire "github"
RUN git clone https://github.com/yguiberteau/Pipeline-pour-l-analyse-des-maladies-mitochondriales.git /tmp/repo && \
    cd /tmp/repo && \
    # il faut faire un pull afin d'avoir toujours la dernière verson du github
    git pull && \ 
    cp -r /tmp/repo/* /github && \
    rm -rf /tmp/repo

RUN mkdir -p /.github/workflows



###############
#### TEST #####
###############

# Creation du fichier "benzinzin.txt"
RUN echo "Contenu du fichier benzinzin.txt" > /data/benzinzin.txt

WORKDIR /

# Copi le fichier FASTQ dans le conteneur
COPY IonXpress_011.fastq /data/IonXpress_011.fastq

# On se place dans le répertoire contenant le script à exécuter
WORKDIR /github/Allignement/scripts

# autorisation d'exécuter le script
RUN chmod +x script2.sh

# Execution du script
RUN sh script2.sh

#commande de fin du dockerfile 
CMD tail -f /dev/null

